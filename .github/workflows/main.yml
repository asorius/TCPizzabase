name: Test

on: push

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      # spin up a database for this job
      postgres:
        image: postgres:16.1-alpine
        env:
          # Postgres service allows creating a user and a database
          # if we provide some specific environment variables to it.
          # You can find out more about these environment variables
          # by visiting https://hub.docker.com/_/postgres and looking
          # at the "Environment Variables" section.
          # No need to overthink what is going on here just yet. We
          # will spend more time on Docker later.
          POSTGRES_USER: turing
          POSTGRES_PASSWORD: turing
          POSTGRES_DB: testdb
        ports:
          # We will need to connect to it somehow. We will use the default
          # Postgres port 5432.
          - 5432:5432
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'latest'
          cache: 'npm'
      #
      - name: Install dependencies'
        run: npm ci

      # lint client code and server code
      - name: Lint server code
        run: npm run lint -w=server

      # TODO: run server tests and client unit tests here. Make sure you are not
      #       running E2E tests here. E2E tests will be run separately.
      - name: Test server code
        env:
          TOKEN_KEY: testkey
          DB_NAME: postgres
          DB_USER: postgres
          DB_PASSWORD: admin
          FIREBASE_STORAGE_BUCKET:
        run: npm run test:mem -w=server
  build-deploy:
    needs: test
    runs-on: ubuntu-22.04
    if: github.ref == 'refs/heads/main'
    env:
      API_ORIGIN: ${{ vars.API_ORIGIN }}
      API_PATH: /api/v1/trpc
      CLIENT_IMAGE_TAG: client-${{ github.sha }}
      SERVER_IMAGE_TAG: server-${{ github.sha }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Setup aws lightsail cli
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --bin-dir /usr/local/bin --install-dir /usr/local/aws-cli --update
          which aws
          aws --version
          sudo curl "https://s3.us-west-2.amazonaws.com/lightsailctl/latest/linux-amd64/lightsailctl" -o "/usr/local/bin/lightsailctl"
          sudo chmod +x /usr/local/bin/lightsailctl

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: eu-west-2
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Build server image
        run: >-
          docker build
          -t $SERVER_IMAGE_TAG
          -f ./server/Dockerfile .

      - name: Build client image
        run: >-
          docker build
          -t $CLIENT_IMAGE_TAG
          --build-arg VITE_API_ORIGIN=$API_ORIGIN
          --build-arg VITE_API_PATH=$API_PATH
          -f ./client/Dockerfile .

      - name: Push server image
        run: >-
          aws lightsail push-container-image
          --service-name ${{ vars.AWS_LIGHTSAIL_SERVICE }}
          --label $SERVER_IMAGE_TAG
          --image $SERVER_IMAGE_TAG
          --output yaml

      - name: Push client image
        run: >-
          aws lightsail push-container-image
          --service-name ${{ vars.AWS_LIGHTSAIL_SERVICE }}
          --label $CLIENT_IMAGE_TAG
          --image $CLIENT_IMAGE_TAG
          --output yaml

      - name: Get Lightsail image tag
        run: |
          aws lightsail get-container-images --service-name ${{ vars.AWS_LIGHTSAIL_SERVICE }} | jq -r '.containerImages[] | select(.image | contains(".'$SERVER_IMAGE_TAG'")) | .image'
          echo "LIGHTSAIL_SERVER_IMAGE=$(aws lightsail get-container-images --service-name ${{ vars.AWS_LIGHTSAIL_SERVICE }} | jq -r '.containerImages[] | select(.image | contains(".'$SERVER_IMAGE_TAG'")) | .image')" >> $GITHUB_ENV
          echo "LIGHTSAIL_CLIENT_IMAGE=$(aws lightsail get-container-images --service-name ${{ vars.AWS_LIGHTSAIL_SERVICE }} | jq -r '.containerImages[] | select(.image | contains(".'$CLIENT_IMAGE_TAG'")) | .image')" >> $GITHUB_ENV

      - name: Create containers.json
        run: |
          echo '{
            "client": {
              "image": "${{ env.LIGHTSAIL_CLIENT_IMAGE }}",
              "command": [],
              "ports": {
                "80": "HTTP"
              }
            },
            "server": {
              "image": "${{ env.LIGHTSAIL_SERVER_IMAGE }}",
              "ports": {
                "3000": "HTTP"
              },
              "environment": {
                "NODE_ENV": "production",
                "DB_SSL": "true",
                "DB_SYNC": "true",
                "DB_HOST": "${{ secrets.PROD_DB_HOST }}",
                "DB_NAME": "${{ secrets.PROD_DB_NAME }}",
                "DB_USER": "${{ secrets.PROD_DB_USER }}",
                "DB_PASSWORD": "${{ secrets.PROD_DB_PASSWORD }}"
              }
            }
          }' > containers.json

      - name: Create public-endpoint.json file
        run: |
          echo '{
            "containerName": "client",
            "containerPort": 80,
            "healthCheck": {
              "intervalSeconds": 10,
              "path": "/api/health"
            }
          }' > public-endpoint.json

      - name: Deploy to AWS Lightsail
        run: |
          aws lightsail create-container-service-deployment \
          --service-name ${{ vars.AWS_LIGHTSAIL_SERVICE }} \
          --containers file://containers.json \
          --public-endpoint file://public-endpoint.json
